import sys
SBox = [[0xd6, 0x90, 0xe9, 0xfe, 0xcc, 0xe1, 0x3d, 0xb7, 0x16, 0xb6, 0x14, 0xc2, 0x28, 0xfb, 0x2c, 0x05],
        [0x2b, 0x67, 0x9a, 0x76, 0x2a, 0xbe, 0x04, 0xc3, 0xaa, 0x44, 0x13, 0x26, 0x49, 0x86, 0x06, 0x99],
        [0x9c, 0x42, 0x50, 0xf4, 0x91, 0xef, 0x98, 0x7a, 0x33, 0x54, 0x0b, 0x43, 0xed, 0xcf, 0xac, 0x62],
        [0xe4, 0xb3, 0x1c, 0xa9, 0xc9, 0x08, 0xe8, 0x95, 0x80, 0xdf, 0x94, 0xfa, 0x75, 0x8f, 0x3f, 0xa6],
        [0x47, 0x07, 0xa7, 0xfc, 0xf3, 0x73, 0x17, 0xba, 0x83, 0x59, 0x3c, 0x19, 0xe6, 0x85, 0x4f, 0xa8],
        [0x68, 0x6b, 0x81, 0xb2, 0x71, 0x64, 0xda, 0x8b, 0xf8, 0xeb, 0x0f, 0x4b, 0x70, 0x56, 0x9d, 0x35],
        [0x1e, 0x24, 0x0e, 0x5e, 0x63, 0x58, 0xd1, 0xa2, 0x25, 0x22, 0x7c, 0x3b, 0x01, 0x21, 0x78, 0x87],
        [0xd4, 0x00, 0x46, 0x57, 0x9f, 0xd3, 0x27, 0x52, 0x4c, 0x36, 0x02, 0xe7, 0xa0, 0xc4, 0xc8, 0x9e],
        [0xea, 0xbf, 0x8a, 0xd2, 0x40, 0xc7, 0x38, 0xb5, 0xa3, 0xf7, 0xf2, 0xce, 0xf9, 0x61, 0x15, 0xa1],
        [0xe0, 0xae, 0x5d, 0xa4, 0x9b, 0x34, 0x1a, 0x55, 0xad, 0x93, 0x32, 0x30, 0xf5, 0x8c, 0xb1, 0xe3],
        [0x1d, 0xf6, 0xe2, 0x2e, 0x82, 0x66, 0xca, 0x60, 0xc0, 0x29, 0x23, 0xab, 0x0d, 0x53, 0x4e, 0x6f],
        [0xd5, 0xdb, 0x37, 0x45, 0xde, 0xfd, 0x8e, 0x2f, 0x03, 0xff, 0x6a, 0x72, 0x6d, 0x6c, 0x5b, 0x51],
        [0x8d, 0x1b, 0xaf, 0x92, 0xbb, 0xdd, 0xbc, 0x7f, 0x11, 0xd9, 0x5c, 0x41, 0x1f, 0x10, 0x5a, 0xd8],
        [0x0a, 0xc1, 0x31, 0x88, 0xa5, 0xcd, 0x7b, 0xbd, 0x2d, 0x74, 0xd0, 0x12, 0xb8, 0xe5, 0xb4, 0xb0],
        [0x89, 0x69, 0x97, 0x4a, 0x0c, 0x96, 0x77, 0x7e, 0x65, 0xb9, 0xf1, 0x09, 0xc5, 0x6e, 0xc6, 0x84],
        [0x18, 0xf0, 0x7d, 0xec, 0x3a, 0xdc, 0x4d, 0x20, 0x79, 0xee, 0x5f, 0x3e, 0xd7, 0xcb, 0x39, 0x48]]

CK = [0x00070e15, 0x1c232a31, 0x383f464d, 0x545b6269,
      0x70777e85, 0x8c939aa1, 0xa8afb6bd, 0xc4cbd2d9,
      0xe0e7eef5, 0xfc030a11, 0x181f262d, 0x343b4249,
      0x50575e65, 0x6c737a81, 0x888f969d, 0xa4abb2b9,
      0xc0c7ced5, 0xdce3eaf1, 0xf8ff060d, 0x141b2229,
      0x30373e45, 0x4c535a61, 0x686f767d, 0x848b9299,
      0xa0a7aeb5, 0xbcc3cad1, 0xd8dfe6ed, 0xf4fb0209,
      0x10171e25, 0x2c333a41, 0x484f565d, 0x646b7279]


def SubWord(A):  # 输入32位二进制字符串
    res = ''
    for i in range(4):
        L = int(A[8 * i:8 * i + 4], 2)
        R = int(A[8 * i + 4:8 * i + 8], 2)
        res += '{:08b}'.format(int(bin(SBox[L][R]), 2))
    return res  # 输出32位二进制字符串


def leftmove(s, k):  # 输入32位字符型二进制数组
    res = s[k:32] + s[0:k]
    res = int(res, 2)
    return res  # 输出整型二进制


def Line1(B):  # 输入32位字符型二进制数组
    res = int(B, 2) ^ leftmove(B, 2) ^ leftmove(B, 10) ^ leftmove(B, 18) ^ leftmove(B, 24)
    return res


def Line2(B):
    res = int(B, 2) ^ leftmove(B, 13) ^ leftmove(B, 23)
    return res


def T1(s):
    temp = SubWord(s)
    res = Line1(temp)
    return res


def T2(s):
    temp = SubWord(s)
    res = Line2(temp)
    return res


def KeyExpansion(MK):
    K0 = int(MK[0:8], 16) ^ 0xa3b1bac6
    K1 = int(MK[8:16], 16) ^ 0x56aa3350
    K2 = int(MK[16:24], 16) ^ 0x677d9197
    K3 = int(MK[24:32], 16) ^ 0xb27022dc
    K = [K0, K1, K2, K3]
    for i in range(32):
        temp = K[i] ^ T2('{:032b}'.format(K[i + 1] ^ K[i + 2] ^ K[i + 3] ^ CK[i], 2))
        K.append(temp)
    rk = []
    for j in range(32):
        rk.append(K[j + 4])
    return rk  # 现在rk是整型数组


def SM4(x, rk, m):
    X = [int(x[0:8], 16), int(x[8:16], 16), int(x[16:24], 16), int(x[24:32], 16)]
    for i in range(32):
        if m == 1:
            temp = X[i] ^ T1('{:032b}'.format(X[i + 1] ^ X[i + 2] ^ X[i + 3] ^ rk[i], 2))
        else:
            temp = X[i] ^ T1('{:032b}'.format(X[i + 1] ^ X[i + 2] ^ X[i + 3] ^ rk[31 - i], 2))
        X.append(temp)
    Y0 = '{:08x}'.format(X[35], 16)
    Y1 = '{:08x}'.format(X[34], 16)
    Y2 = '{:08x}'.format(X[33], 16)
    Y3 = '{:08x}'.format(X[32], 16)
    Y = Y0 + Y1 + Y2 + Y3
    return Y


def en_padding(strList):  # PKCS7，缺几，补几个几
    s = []
    l = len(strList)
    k = l // 16
    m = l % 16
    p = 16 - m
    q = '0x' + '{:02x}'.format(p, 16)
    for i in range(k):
        s.append([])  # 加一个维度填16个数
        for j in range(16):
            s[i].append(strList[16 * i + j])
    s.append([])
    if m != 0:  # 如果输入数量不是16的整数倍
        for j in range(m):
            s[k].append(strList[16 * k + j])
        for i in range(p):
            s[k].append(q)
    else:  # 就算是16的整数倍也要补一行0x10
        for i in range(16):
            s[k].append('0x10')
    return s


def de_padding(strList):  # 解码时输入长度必为16整数倍
    s = []
    l = len(strList)
    k = l // 16
    for i in range(k):
        s.append([])
        for j in range(16):
            s[i].append(strList[16 * i + j])
    return s


def list2hexstr(l):
    res = ''
    for i in range(16):
        res += '{:02x}'.format(int(l[i], 16), 16)
    return res


def hexstr2list(s):
    res = ''
    for i in range(16):
        res += '0x'
        res += s[2*i:2*i+2]
        res += ' '
    return res


def SM4_ECB(rk, m, strList):
    if m == 1:
        s = en_padding(strList)
        l = len(s)
        for i in range(l):
            print(hexstr2list(SM4(list2hexstr(s[i]), rk, m)))
    else:
        t = 0
        s = de_padding(strList)
        l = len(s)
        for i in range(l-1):
            print(hexstr2list(SM4(list2hexstr(s[i]), rk, m)))
        temp = SM4(list2hexstr(s[l - 1]), rk, m)
        p = int(temp[30:32], 16)  # 解码要把填充的数据删掉.注意填充的数据恢复成明文才能看到
        for j in range(p):
            if temp[30-2*j:32-2*j] == temp[30:32]:
                t += 1
        if t == p:
            for i in range(16-p):
                print('0x'+temp[2*i:2*i+2], end=' ')


k = input().strip().replace('\n', '').replace('\r', '')
m = int(input())
k = '{:032x}'.format(int(k, 16), 16)
rk = KeyExpansion(k)
strList = []
for line in sys.stdin:  # 当没有接受到输入结束信号就一直遍历每一行 python要enter完再按crtl+D结束输入
    tempStr = line.split()  # 对字符串利用空字符进行切片
    strList.extend(tempStr)  # 把每行的字符串合成到列表
SM4_ECB(rk, m, strList)
